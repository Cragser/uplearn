/**
 * eslint-disable-next-line max-len
 */

const input =
  '<think>\nOkay, let me start by understanding what the user is asking. They want me to take a list of terms—idiomatic expressions and phrasal verbs—and create a comprehensive educational resource in JSON format. The goal is to build an interactive tool for language learners, which can be integrated into apps or platforms. \n\nThe INPUT RULES mention a list of terms. For example, if the input is [word1, word2, word3], I need to generate a JSON structure with sections like summary, content pages, glossary, database, and a quiz. The output must strictly be in JSON, following specific keys and nested objects as outlined.\n\nFirst, I need to ensure the JSON structure is correct. The "section.summary" requires a brief description including objectives, key concepts, and learning outcomes. Then, "page.content" has to be HTML with a short story using all terms, movie and song examples, and mnemonics for Mexican users. The story needs to be original, engaging, and 5-8 sentences long. Movie examples must include real quotes with movie titles and years. Similarly, song examples should have actual lyrics with song titles and artists. Mnemonics should leverage Spanish language or cultural references to aid memory.\n\nNext, the glossary entries each need their term, definition, and all possible meanings. The database section requires context entries showing each word\'s usage, along with meanings and related words. The quiz should have questions that test understanding of the terms through multiple-choice options.\n\nI have to check that all terms provided in the input are included, and each part of the JSON corresponds correctly. For example, every term in the glossary.terms list must have a definition. The database entries must cover each term with context and related words. Also, quiz questions should target these terms, offering plausible options to avoid being too obvious.\n\nPotential issues to watch for: ensuring all movie and song examples are accurate and correctly formatted. Mnemonics need to be culturally relevant. HTML content should be properly tagged but escape any markdown. The JSON should have no syntax errors, and arrays should be correctly indexed. Since the output is only JSON objects, I must avoid any additional text.\n\nTesting the process with a sample input, like ["break down", "get over", "run out"], I need to create elements for each. The short story might involve a character overcoming challenges, using all three phrasal verbs. Movie quotes for "break down" could be from a film where a car breaks down. Song examples for "get over" might include lyrics about moving past a breakup. Mnemonics could relate "break down" to "romper" in Spanish, using a rhyming phrase.\n\nEnsuring adherence to the input rules, I need to make sure only English terms are included and that each part of the JSON follows the specified structure. Finally, validating the JSON to avoid syntax issues is crucial for integration into apps smoothly.\n</think>\n\n```json\n{\n  "section": {\n    "summary": "Explore key idiomatic expressions and phrasal verbs through contextual examples and interactive tools. Objectives: Master practical usage of terms in spoken and written English. Key concepts: Contextual application, cultural references, memory aids. Learning outcomes: Improved retention and accurate deployment of expressions."\n  },\n  "page": {\n    "name": "PhrasalVerb-DynamicLearning",\n    "content": "<h2>Short Story</h2><p>Maria\'s car broke down on her way to the airport, making her panic about missing her flight. She tried to get over her anxiety by calling roadside assistance. While waiting, she realized she’d run out of snacks and scrolled through movie quotes to kill time. By the time help arrived, she’d memorized three lines from \'The Martian\' (2015) and hummed a Taylor Swift chorus.</p><h3>Movie Examples</h3><ul><li><i>\\"Sometimes life hits you in the head with a brick. Don’t lose faith.\\"</i> - Jobs (2013) [break down]</li><li><i>\\"You need to get over yourself, Mr. Darcy!\\"</i> - Pride & Prejudice (2005) [get over]</li><li><i>\\"We’re running out of time!\\"</i> - Interstellar (2014) [run out]</li></ul><h3>Song Examples</h3><ul><li><i>\\"I’m breaking down defenses one by one\\"</i> - Warrior by Demi Lovato [break down]</li><li><i>\\"Baby, I’m just gonna shake, shake, shake... get over it\\"</i> - Shake It Off by Taylor Swift [get over]</li><li><i>\\"My patience is running out\\"</i> -慕れ-れい by BabyMetal [run out]</li></ul><h3>Mnemotecnias</h3><p>Break down → \\"Break Tacos\\" (Imagina rompiendo tacos cuando algo se descompone)<br>Get over → \\"Get Burrito\\" (Supera tu enojo comiendo un burrito)<br>Run out → \\"Corre OUT\\" (Cuando se acaba algo, ¡corres OUT de la tienda!)</p>"\n  },\n  "glossary": {\n    "intro": "Core vocabulary for advanced English expression",\n    "name": "IdiomaticMasteryTerms",\n    "terms": [\n      {\n        "concept": "break down",\n        "definition": "1. Mechanical failure 2. Emotional collapse 3. Analyze systematically"\n      },\n      {\n        "concept": "get over",\n        "definition": "1. Recover from illness 2. Overcome emotional hurdle 3. Move past obstacles"\n      },\n      {\n        "concept": "run out",\n        "definition": "1. Exhaust supply 2. Expire (documentation) 3. Pursue until capture"\n      }\n    ]\n  },\n  "database": {\n    "intro": "Practical usage scenarios from media and literature",\n    "name": "PhrasalVerb-UsageBank",\n    "entries": [\n      {\n        "word": "break down",\n        "context": "Transportation troubleshooting manual",\n        "meaning": "Sudden mechanical malfunction",\n        "related_words": "engine failure, roadside assistance, diagnostics"\n      },\n      {\n        "word": "get over",\n        "context": "Psychology Today article",\n        "meaning": "Emotional recovery process",\n        "related_words": "resilience, acceptance, closure"\n      },\n      {\n        "word": "run out",\n        "context": "Grocery shopping app alert",\n        "meaning": "Depletion of essential items",\n        "related_words": "inventory management, restock, shortages"\n      }\n    ]\n  },\n  "quiz": {\n    "name": "PhrasalVerbsChallenge",\n    "questions": [\n      {\n        "question": "Which movie quote uses \'break down\' metaphorically?",\n        "options": [\n          "\\"You\\\'re breaking down my walls\\" - Fifty Shades (2015)",\n          "\\"Check engine light came on\\" - Ford v Ferrari (2019)", \n          "\\"Crysis in aisle five!\\" - Supermarket Sweep (2020)"\n        ],\n        "answer": 0\n      },\n      {\n        "question": "What\'s the medical meaning of \'get over\'?",\n        "options": [\n          "Climb physical barrier",\n          "Recover from illness",\n          "Ignore problems"\n        ],\n        "answer": 1\n      },\n      {\n        "question": "Which context uses \'run out\' for time management?",\n        "options": [\n          "Baking cookies", \n          "Project deadline",\n          "Gas station sign"\n        ],\n        "answer": 1\n      }\n    ]\n  }\n}\n```';

import { cleanDeepSeekThink } from '../shared/util/ai/clean-deepseek-think';

describe('cleanDeepSeekThink', () => {
  it('should successfully parse valid JSON from code block', () => {
    const input = '```json\n{"test": "value"}\n```';
    const result = cleanDeepSeekThink(input);
    expect(result).toEqual({ test: 'value' });
  });

  it('should remove <think> blocks and parse remaining JSON', () => {
    const input = '<think>Some thinking content</think>\n```json\n{"data": 123}\n```';
    const result = cleanDeepSeekThink(input);
    expect(result).toEqual({ data: 123 });
  });

  it('should return null for invalid JSON', () => {
    const input = '```json\ninvalid json content\n```';
    const result = cleanDeepSeekThink(input);
    expect(result).toBeNull();
  });

  it('should return null when no JSON code block is found', () => {
    const input = 'Some text without JSON code block';
    const result = cleanDeepSeekThink(input);
    expect(result).toBeNull();
  });
});
